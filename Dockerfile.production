FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Install system dependencies including aria2 and ffmpeg
RUN apt-get update && apt-get install -y \
    aria2 \
    ffmpeg \
    gcc \
    python3-dev \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DOWNLOAD_DIR=/tmp/downloads \
    LOG_DIR=/app/logs \
    PYTHONPATH=/app

# Create necessary directories
RUN mkdir -p /tmp/downloads /app/logs

# Copy requirements files first for better caching
COPY requirements.txt /app/
COPY web/requirements.txt /app/web/

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt \
    && pip install --no-cache-dir -r web/requirements.txt \
    && pip install --no-cache-dir gunicorn

# Copy the source code
COPY . /app/

# Run the module creation script
RUN python create_init_files.py

# Install the package in development mode
RUN pip install -e .

# Create a non-root user for security
RUN useradd -m appuser && \
    chown -R appuser:appuser /app /tmp/downloads /app/logs
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:${PORT:-10000}/api/status || exit 1

# Expose port (Render will use the $PORT environment variable)
EXPOSE ${PORT:-10000}

# Setup entry point
COPY docker-entrypoint.sh /app/
RUN chmod +x /app/docker-entrypoint.sh

# Command to run the application
ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD ["gunicorn", "--workers=1", "--bind=0.0.0.0:${PORT:-10000}", "--log-level=info", "--timeout=120", "web.wsgi:app"]
